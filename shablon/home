using System;

public interface IVehicle {
    void Drive();
    void Refuel();
}

public class Car : IVehicle {
    private string Brand;
    private string Model;
    private string FuelType;

    public Car(string brand, string model, string fuelType) {
        Brand = brand;
        Model = model;
        FuelType = fuelType;
    }

    public void Drive() {
        Console.WriteLine($"{Brand} {Model} едет.");
    }

    public void Refuel() {
        Console.WriteLine($"{Brand} {Model} заправляется {FuelType}.");
    }
}

public class Motorcycle : IVehicle {
    private string Type;
    private int EngineCapacity;

    public Motorcycle(string type, int engineCapacity) {
        Type = type;
        EngineCapacity = engineCapacity;
    }

    public void Drive() {
        Console.WriteLine($"{Type} мотоцикл едет с объемом двигателя {EngineCapacity}");
    }

    public void Refuel() {
        Console.WriteLine($"{Type} мотоцикл заправляется.");
    }
}

public class Truck : IVehicle {
    private int LoadCapacity;
    private int Axles;

    public Truck(int loadCapacity, int axles) {
        LoadCapacity = loadCapacity;
        Axles = axles;
    }

    public void Drive() {
        Console.WriteLine($"Грузовик с грузоподъемностью {LoadCapacity} тонн едет.");
    }

    public void Refuel() {
        Console.WriteLine($"Грузовик заправляется.");
    }
}

public class Bus : IVehicle {
    private int PassengerCapacity;

    public Bus(int passengerCapacity) {
        PassengerCapacity = passengerCapacity;
    }

    public void Drive() {
        Console.WriteLine($"Автобус с {PassengerCapacity} пассажирами едет.");
    }

    public void Refuel() {
        Console.WriteLine("Автобус заправляется.");
    }
}

public abstract class VehicleFactory {
    public abstract IVehicle CreateVehicle();
}

public class CarFactory : VehicleFactory {
    private string Brand, Model, FuelType;

    public CarFactory(string brand, string model, string fuelType) {
        Brand = brand;
        Model = model;
        FuelType = fuelType;
    }

    public override IVehicle CreateVehicle() {
        return new Car(Brand, Model, FuelType);
    }
}

public class MotorcycleFactory : VehicleFactory {
    private string Type;
    private int EngineCapacity;

    public MotorcycleFactory(string type, int engineCapacity) {
        Type = type;
        EngineCapacity = engineCapacity;
    }

    public override IVehicle CreateVehicle() {
        return new Motorcycle(Type, EngineCapacity);
    }
}

public class TruckFactory : VehicleFactory {
    private int LoadCapacity, Axles;

    public TruckFactory(int loadCapacity, int axles) {
        LoadCapacity = loadCapacity;
        Axles = axles;
    }

    public override IVehicle CreateVehicle() {
        return new Truck(LoadCapacity, Axles);
    }
}

public class BusFactory : VehicleFactory {
    private int PassengerCapacity;

    public BusFactory(int passengerCapacity) {
        PassengerCapacity = passengerCapacity;
    }

    public override IVehicle CreateVehicle() {
        return new Bus(PassengerCapacity);
    }
}

public class Program {
    public static void Main(string[] args) {
        Console.WriteLine("Выберите тип транспорта (Car, Motorcycle, Truck, Bus):");
        string transportType = Console.ReadLine();

        VehicleFactory factory = null;

        switch (transportType.ToLower()) {
            case "car":
                Console.WriteLine("Введите марку:");
                string brand = Console.ReadLine();
                Console.WriteLine("Введите модель:");
                string model = Console.ReadLine();
                Console.WriteLine("Введите тип топлива:");
                string fuelType = Console.ReadLine();
                factory = new CarFactory(brand, model, fuelType);
                break;
            case "motorcycle":
                Console.WriteLine("Введите тип мотоцикла:");
                string type = Console.ReadLine();
                Console.WriteLine("Введите объем двигателя:");
                int engineCapacity = int.Parse(Console.ReadLine());
                factory = new MotorcycleFactory(type, engineCapacity);
                break;
            case "truck":
                Console.WriteLine("Введите грузоподъемность:");
                int loadCapacity = int.Parse(Console.ReadLine());
                Console.WriteLine("Введите количество осей:");
                int axles = int.Parse(Console.ReadLine());
                factory = new TruckFactory(loadCapacity, axles);
                break;
            case "bus":
                Console.WriteLine("Введите пассажировместимость:");
                int passengerCapacity = int.Parse(Console.ReadLine());
                factory = new BusFactory(passengerCapacity);
                break;
            default:
                Console.WriteLine("Неверный транспорт.");
                return;
        }

        IVehicle vehicle = factory.CreateVehicle();
        vehicle.Drive();
        vehicle.Refuel();
    }
}
